OK guys today Its learn python part 2 
===============================================
Today we'll learn about Using the Python Interpreter part 1 (2.1.0 Info on Invoking the Interpreter)

The Python interpreter is usually installedas /usr/local/bin/python3.4 on those machines where it is available;
Just like putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing the command:
<python3.4>  to the shell.

 Since the choice of the directory where the interpreter lives is an installation option, other places are possible;
 
 <maybe your thinking what really is interpreter;In computer science, an interpreter is a computer program 
 that directly executes.>
 
 check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular alternative location.)
 
On Windows machines, the Python installation is usually placed in C:\Python34, though you can change this when you’re
running the installer. To add this directory to your path, you can type the following command into the command prompt 
in a DOS box:
<set path=%path%;C:\python34>

Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes the interpreter to 
exit with a zero exit status. If that doesn’t work, you can exit the interpreter by typing the following command: quit().

<BTW you do know you need to install python software on windows>
The interpreter’s line-editing features include interactive editing, history substitution and code completion on systems
thatsupport readline. Perhaps the quickest check to see whether command line editing is supported is typing Control-P to
the first Python prompt you get. If it beeps, you have command line editing;


see Appendix Interactive Input Editing and History Substitution
<https://docs.python.org/3/tutorial/interactive.html#tut-interacting> 
for an introduction to the keys. If nothing appears to happen, or if <^P> is echoed, command line editing isn’t available;
you’ll only be able to use backspace to remove characters from the current line.

The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, 
it reads and executes commands interactively; when called with a file name argument or with a file as standard input,
it reads and executes a script from that file.

A second way of starting the interpreter is <python -c command [arg] ...,> which executes the statement(s) in command,
analogous to the shell’s -c option. Since Python statements often contain spaces or other characters that are special to
the shell, it is usually advised to quote command in its entirety with single quotes.

Some Python modules are also useful as scripts. These can be invoked using Mpython -m module [arg] ...,> 
which executes the source file for module as if you had spelled out its full name on the command line.

When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards.
This can be done by passing <-i> before the script.

